/* 
Design Setting
Add whenever you use and keep track of them always!
★ Make sure that the design is consistent

---- 01 TYPOGRAPHY SYSTEM

- Font size system (px)
10 / 12 / 14 / 16 / 18 / 20 / 24 / 30 / 36 / 44 / 52 / 62 / 74 / 86 / 98

- Font weights
Default: 400
Medium: 500
Semi-bold: 600
Bold: 700

- Line heights
Default: 1
Small: 1.05
Medium: 1.2
Paragraph default: 1.6
Large: 1.8

- Letter Spacing
0.5px
0.75px

---- 02 COLORS
※ Use 'tint and shade' webpage to find its darker and lighter version of 'Primary' color
※ Use 'coolers' to check contrast : https://coolors.co/contrast-checker/112a46-acc8e5

- Primary: #e67e22
- Tints
  #fdf2e9
  #f8d8bd
  #eb984e
- Shades
  #cf711f
  #45260a
- Accents
- Greys
  #888
  #767676 : lightest grey allowed on #fff (white)
  #6f6f6f : lightest grey allowed on '#fdf2e9' (contrast : ok)
  #555
  #333

---- 05 SHADOWS

box-shadow: 0 2.4rem 4.8rem rgba(0, 0, 0, 0.75);

---- 06 BORDER-RADIUS

Default: 9px
Medium: 11px

---- 07 WHITESPACE

- Spacing system (px)
2 / 4 / 8 / 12 / 16 / 24 / 32 / 48 / 64 / 80 / 96 / 128

*/

* {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

html {
  /* (default) 1rem = 16px

  font-size: 10px;
  -> now 1rem = 10px
     This is recommended, because it is easy to calculate
  -> The entire layout would be changed, because the element defined by 'rem' size would change their size
  ★ This is a really really handy way to create a responsive design
  
  However, it's better to use 'percentage %' to set the font-size
  Because, it is scaled automatically based on different user's browser setting
  ex) 16px * 0.625 = 10px
  -> 0.625 : ★ Percentage of user's browser font-size setting
  Many many many web designer use this trick!*/
  font-size: 62.5%;

  /* ★ All the items that overflow the viewport horizontally will simply be hidden
  -> We code this to hide the navigation bar on the right side of the main screen for mobile users
  ★ If we write 'overflow', not 'overflow-x', we cannot scroll at all (vertically + horizontally)
  Write the code below both in 'html' and 'body' */
  overflow-x: hidden;

  /* ★ When you click the button to move to the other part of the page, the page will move smoothly
  -> But it is only available for 'Chrome'
     Does NOT work on 'Microsoft Edge' and 'Safari'
  -> That's why we use Java script to apply this effect */
  /* scroll-behavior: smooth; */
}

body {
  font-family: "Rubik", sans-serif;
  line-height: 1;
  font-weight: 400;
  color: #555;

  /* All the items that overflow the viewport horizontally will simply be hidden
  Write the code below both in 'html' and 'body' 
  ★ This code only works if there is nothing absolutely positioned in relation to body
  -> go to 'header' and code 'position:relative' */
  overflow-x: hidden;
}

/*
.test {
  background-color: red;

  width: 1000px;

★ max-width
  - The width becomes flexible
  - It is adjusted with the size of parent element, 'body'
  - When the screen size decreased, so the size of parent element also decreased,
  and their size is less than max-width value,
  it just occupies the 100% of the parent element

  max-width: 1000px;

  ★ Define the width based on the font size
  1 rem = 16px (default font size)
  -> 50 rem = 800px
  Why we do this?
  - When we change the font size, it will automatically change every rem units in CSS
  ★ How?
  - If we define 'font-size: 10px;' in 'html', then 1rem will be 10px, not 16px
  - Thus, every elements which are defined by 'rem' size, would change their size automatically

  max-width: 50rem;
  padding: 4rem;
  -> 4rem = 64px

  color: #fff;
  font-size: 2rem; /* 2rem = 32px
}
*/

/* ***************************************** */
/* GENERAL REUSABLE COMPONENTS */
/* ***************************************** */

.container {
  /* 1140px, 1200px is the convention width size */
  max-width: 120rem;
  /* Subtract 32px from the left and right side
  1200 - 64 = about 1140 */
  padding: 0 3.2rem;
  margin: 0 auto; /* center (auto : same margin for the left and right side) */
}

.grid {
  display: grid;
  column-gap: 6.4rem;
  row-gap: 9.6rem;
  /* margin-bottom: 9.6rem; */
}

/* .grid:last-child {
  margin-bottom: 0;
} */

/* ★ FOR NOT LAST CHILD */
.grid:not(:last-child) {
  margin-bottom: 9.6rem;
}

.grid--2-cols {
  grid-template-columns: repeat(2, 1fr);
}

.grid--3-cols {
  grid-template-columns: repeat(3, 1fr);
}

.grid--4-cols {
  grid-template-columns: repeat(4, 1fr);
}

.grid--5-cols {
  grid-template-columns: repeat(5, 1fr);
}

/* It's okay to code the same thing in '.grid'
However, to reuse '.grid' for other elements,
it's better to create another class just for this part
-> It's good for big project */
.grid-center-v {
  align-items: center;
}

.heading-primary,
.heading-secondary,
.heading-tertiary {
  font-weight: 700;
  color: #333;
  /* color: #45260a; -> You can also find the color from 'Tint and Shade Generator' */
  letter-spacing: -0.5px; /* This is the distance we don't want to scale up or down -> use px (not rem) */
}

.heading-primary {
  font-size: 5.2rem;
  line-height: 1.05;
  margin-bottom: 3.2rem;
}

.heading-secondary {
  font-size: 4.4rem;
  line-height: 1.2;
  margin-bottom: 9.6rem;
}

.heading-tertiary {
  font-size: 3rem;
  line-height: 1.2;
  margin-bottom: 3.2rem;
}

.subheading {
  /* we used 'span', so we should set it as a 'block' first */
  display: block;
  font-size: 1.6rem;
  font-weight: 500;
  color: #cf711f;
  text-transform: uppercase;
  margin-bottom: 1.6rem;
  letter-spacing: 0.75px;
}

.btn,
.btn:link,
.btn:visited {
  display: inline-block;
  /* background-color: #e67e22; */
  /* color: #fff; */
  font-size: 2rem;
  font-weight: 600;
  text-decoration: none;
  padding: 1.6rem 3.2rem;
  border-radius: 9px;

  /* Only necessary for '.btn' */
  border: none;
  cursor: pointer;
  font-family: inherit;

  /* ★ Animation : Put transition on original "state"
  transition : change the color slowly
  all : background color + color
  1s : during 1 seconds */
  transition: all 0.3s;
}

.btn--full:link,
.btn--full:visited {
  background-color: #e67e22;
  color: #fff;
}

.btn--full:hover,
.btn--full:active {
  background-color: #cf711f;
}

.btn--outline:link,
.btn--outline:visited {
  background-color: #fff;
  color: #555;
}

.btn--outline:hover,
.btn--outline:active {
  background-color: #fdf2e9;

  /* This code draw border outside of the element
  border: 3px solid white; */

  /* ★ Trick to add border inside -> use 'inset'
  box-shadow: inset horizontal vertical blur scale size color */
  box-shadow: inset 0 0 0 3px #fff;
}

.btn--form {
  background-color: #45260a;
  color: #fdf2e9;
  /* align-self: vertically align items, not for the container, but for the single item */
  align-self: end;
  /* Apply the same 'padding' value with other items near it to align them */
  padding: 1.2rem;
}

/* Animation 'transition' is already applied by its parent element */
.btn--form:hover {
  background-color: #fff;
  color: #555;
}

.link:link,
.link:visited {
  /* To give padding, we should make it 'inline-block' */
  display: inline-block;
  color: #e67e22;
  text-decoration: none;
  /* ★ Trick to apply same color as the text color
  -> currentColor : By doing so, we don't have to change many things when we change one thing */
  border-bottom: 1px solid currentColor;
  padding-bottom: 2px;
  transition: all 0.3s;
}

.link:hover,
.link:active {
  color: #cf711f;
  /* To remove the bottom line, if we code as below, the entire layout jumps a little bit
  So, we need another way
  border-bottom: none;
  ★ Instead, we can use 'transparent' keyword */
  border-bottom: 1px solid transparent;
}

.list {
  list-style: none;
  display: flex;
  flex-direction: column;
  gap: 1.6rem;
}

.list-item {
  font-size: 1.8rem;
  display: flex;
  align-items: center;
  gap: 1.6rem;
  line-height: 1.2;
}

.list-icon {
  width: 3rem;
  height: 3rem;
  color: #e67e22;
}

/* ★ Without this, if you focus something like links or buttons, there would be dark blue border (default)
Check with 'tab' key! */
*:focus {
  /* 'No outline' would be the nightmare for people who just navigate the page with 'tab' key
  We can't tell where the focus is and this is really bad for accessibility
  ★ Never do this!
  outline: none;
  
  Instead we can add some more effects */
  outline: none;
  /* outline: 4px dotted #e67e22;
  outline-offset: 8px; */
  box-shadow: 0 0 0 0.8rem rgba(230, 125, 34, 0.5);
}

/* ***************************************** */
/* HELPER/SETTING CLASSES */
/* ***************************************** */

/* sm : small */
.margin-right-sm {
  /* ★ !important : always have higher priority */
  margin-right: 1.6rem !important;
}

/* md : medium */
.margin-bottom-md {
  margin-bottom: 4.8rem !important;
}

.center-text {
  text-align: center;
}

/* Make strong elements less bold */
strong {
  font-weight: 500;
}
