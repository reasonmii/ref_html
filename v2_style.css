/*Comment : ctrl + /

See the CSS code of the page
1) Right click the web page - Inspect (ctrl + shift + I)
2) Select the specific part (word) in the page  - Right click - Inspect
You can modify the code directly

★ Inspect
- Select the font size code + shift + up -> directly see the changed font size

Selector order of priority
- Last selection in code applies *
- Declaration marked !important (the highest priority)
  -> Inline style
  -> ID (#) selector
  -> Class(.) or pseudo-class(:) selector
  -> Element selector (p, div, li, etc.)
  -> Universal selector (*)
  -> Inheritance

body element is the parent element of all the other elements in html
*/

/* Universal selector (*)
It selects all the elements in the page

It's better to apply 0 for margin and padding as a default */
* {
  /* border-top: 10px solid #1098ad; */
  margin: 0;
  padding: 0;
}

/*======================= PAGE SECTIONS =======================*/
/*Format for the whole page*/
body {
  color: #444;
  font-family: sans-serif;

  border-top: 10px solid #1087ad;
  position: relative;
}

/* Set the size of the whole body 
- Contents are not resized according to the screen size
  Always keeps things on the left side (default)
- All child elements are smaller than this size

margin-left: auto;
margin-right: auto;
-> ★ Margin left and right should be the same size
   They are on the center

margin: 0 auto;
-> 0 for top and bottom, auto for left and right
*/
.container {
  width: 800px;
  /* margin-left: auto;
  margin-right: auto; */
  margin: 0 auto;
}

/* padding : 20px
- between the content's margin and its border
- all 4 sides should be 20px (top, bottom, left, right)

★ Padding vs Margin
Whenever you need some space inside of an element (mostly for background colors or border of the element), use padding
Inorder to create space outside of an element, or the space between multiple elements, use margin

★ When you want to format the page, it's better to use only 'margin-bottom'  or only 'margin-top' to separte the contents 
It's because of the phenomenon called 'Collapsing margin'
Basically, when you use two margins that occupy the same space, only one of them is actually visible on the page
That is usually the larger of the two
ex) margin-top 20px; margin-bottom 40px -> there would be only margin 40px (not 60px)
*/
.main-header {
  background-color: #f7f7f7; /*subtle grey*/
  /* padding: 20px;
  padding-left: 40px;
  padding-right: 40px; */
  padding: 20px 40px;
  margin-bottom: 60px;
  height: 80px;
}

nav {
  font-size: 18px;
  text-align: center;
}

.post-header {
  margin-bottom: 40px;
}

article {
  margin-bottom: 60px;
}

aside {
  background-color: #f7f7f7;
  /*
  'border' property includes 3 different properties
  - border width, style, color
  So, it's called shorthand property
  
  border: 5px solid #1098ad;
  border-left: 5px solid #1098ad;
  border-right: 5px solid #1098ad;

  ※ style : solid, dotted, dashed, ... 
  */
  border-top: 5px solid #1098ad;
  border-bottom: 5px solid #1098ad;
  padding: 50px 0;
  width: 500px;
}

/*======================= SMALLER ELEMENTS =======================*/
/*Combining Selectors - List*/
h1,
h2,
h3 {
  /*
  Choose Color
  1) color: blue
  2) color: rgba(206, 44, 152, 0.767);
  3) color: #fff
  -> After writing this, you can just hover the color palette
     and pick what you want
  
  ★ If you write multiple colors the final last one would be applied
  -> overwritten */
  color: #1098ad; /*red : 10, green : 98, blue : ad*/
}

/*if there are more than one h1, it would select all of them*/
h1 {
  /*color: #1098ad;*/
  font-size: 26px;
  text-transform: uppercase;
  /*can't use your font installed in your computer*/
  font-style: italic;
}

h2 {
  font-size: 40px;
  margin-bottom: 30px;
  position: relative;
}

h3 {
  font-size: 30px;
  margin-bottom: 20px;
}

h4 {
  font-size: 20px;
  text-transform: uppercase;
  text-align: center;
}

/*This selects all 'p' in html*/
p {
  font-size: 22px;
  line-height: 1.5;
  margin-bottom: 15px;
}

/* Without specifying margin, we can't see the list's number or bullet points,
because there is no space to show it */
ul,
ol {
  margin-left: 50px;
  margin-bottom: 20px;
}

li {
  font-size: 20px;
  margin-bottom: 10px;

  /* 3 elements become 'inline' boxes
  They occupy the space only what they need side by side

  display: inline; */
}

/* The last one doesn't have to have any margin
Whenever we use '0', we don't specify 'px' */
li:last-child {
  margin-bottom: 0;
}

/*Descendant selector
Select all the 'p' elements
that are inside of the 'footer' element

footer p {
  font-size: 16px;
}

Instead, we can use 'id'
Use hash(#) to call 'id'
*/
#copyright {
  font-size: 16px;
}

/*Descendant selector
Not to apply style to every header in 'p'
we can specify more by adding 'article' as below:

article header p {
  font-style: italic;
}

but it's better to give a name (id) to the part you want to change in html
so that you can just call it without big words

Use hash(#) to call 'id'
*/
#author {
  font-style: italic;
  font-size: 18px;
}

/*Use dot(.) to call 'Class'*/
.related-author {
  font-size: 18px;
  font-weight: bold;
}

.related {
  list-style: none;
}

/*
We don't have to manually name every first element
of the list to give them a style

.first-li {
  font-weight: bold;
}

Instead, we can use Pseudo-classes
It would select all 'li' elements and find the first-child
*/
li:first-child {
  font-weight: bold;
}

/* 
What can be in ()
1) number 2, 3, ... : 2nd child, ...
2) odd/even
   This technique is especially useful when you choose a background color of a table
*/
li:nth-child(even) {
  /* color: red; */
}

li:last-child {
  font-style: italic;
}

/*Select the first paragraph inside the article

article p:first-child {
  color: red;
}

Misconception : This code won't work
It would not change the background color of the first paragraph in the article
It's because first-child of the article is a 'header' not 'p'
Therefore, this code does not work
★ This works only when the 'paragraph' is actually the first child of the article

★ It means when we mixed multiple elements inside the parent element,
   then, this pseudo classes won't work perfectly
   But, it will work well such as in the 'list' as above

The code below actually works
It's because the paragraph is indeed the last child of the article
*/
article p:last-child {
  color: black;
}

/* Styling links
Always order LVHA : 1) link 2) visited 3) hover 4) active

a:link  - It targets anchors with href which has actual links
text-decoration: none - no line under the text
*/
a:link {
  color: #1098ad;
  text-decoration: none;
}

/* anchors visited
They are usually set as '#777' (grey)*/
a:visited {
  /* color: #777 */
  color: #1098ad;
}

/*When the mouse is hover on the anchors
The link will be turned to the style below
*/
a:hover {
  color: orangered;
  font-weight: bold;
  text-decoration: underline /*wavy*/ orange;
}

/*When the anchor is clicked*/
a:active {
  background-color: black;
  font-style: italic;
}

/* This can't do anything
Pseudo classes(:) above has the higher priority

a {
  color: red;
}
*/

/* auto : maintain its original ratio
★ % : percentage of the parent container
       the size is changing according to the screen size*/
.post-img {
  width: 100%;
  height: auto;

  /* images are actually inline elements but they behave like block
  - because they add "vertical" margin if we use the code below

  margin: 100px
  */
}

nav a:link {
  /* The code below will only be applied horizontally,
  because anchor element is an inline element
  
  margin: 20px;
  padding: 20px;

  ★ Render the inline element to the 'block' level element 
  - They occupy all the width they can
  - They also have vertical margins now
  - They are outside of the header element
    because we set the size of '.main-header' 'height'
    if not, the height of the header automatically changed

  display: block; */

  /* inline-block
  - it has both features of inline and block
  - it can have top margin as well like block*/
  margin-right: 30px;
  margin-top: 10px;
  display: inline-block;
}

/* The last one would not have right side margin */
nav a:link:last-child {
  margin-right: 0;
}

/* To position it at the bottom right in the page
★ the parent element of this should have 'relative' position
-> we should add code 'position: relative;' to the parent element */
button {
  font-size: 22px;
  padding: 20px;
  cursor: pointer;

  /* absolute : it's not moving with the screen */
  position: absolute;
  bottom: 50px;
  right: 50px;
}

/* :: Pseudo-elements
It's not an actual element in html
But we can style it in CSS

The first letter in h1 is a 'book' icon
Now, the icon is no more italic and it has 5px space between the letter */
h1::first-letter {
  font-style: normal;
  margin-right: 5px;
}

/* Set the first letter in h2 as big as 80px

h2::first-letter {
  font-size: 80px;
} */

/* Color red to every first line of the paragraph
h3 + p : Json sibling selector */
h3 + p::first-line {
  /* color: red; */
}

/* If you don't want to write anything, you can write like this - content: "";

before : very first child element of the parent element, 'h2'
after : very last child element of the parent element, 'h2'
*/
h2::after {
  content: "TOP";
  background-color: #ffe70e;
  color: #444;
  font-size: 16px;
  font-weight: bold;
  display: inline-block;
  padding: 5px 10px;

  position: absolute;
  /* Negative value : outside of the box */
  top: -10px;
  right: -25px;
}

/* Resolving conflicts 
We have 4 ways to select the same thing
1) Result : Red
   Why? ID selector has the higher priority than all of others
2) Turn off the ID selector
   Result : yellow
   Why? .text is later than .copyright (both are class selector)

When you hover the mouse over the code, you can see 'Selector Specificity'
It represents the priority - (1, 0, 0)

★ When you put !important, this has the highest priority
*/
/* #copyright {
  color: red;
}

.copyright {
  color: blue;
}

.text {
  color: yellow;
}

footer p {
  color: green !important;
} */
